version: "1.0"

services: 
  mssql:
    container_name: mssql-server
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - 8002:1433
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=@123Abc$3212
    volumes:
      - db:/var/lib/mssql/data
  redis-stack:
    container_name: redis
    restart: always
    image: redis/redis-stack:latest
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
      - cache:/data
    ports:
      - 6379:6379
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
        
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  identity:
    container_name: identity
    image: luuthuong/identity:v1
    build:
      context: .
      dockerfile: src/Identity/Dockerfile
    ports:
      - 8080:80
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    restart: on-failure:3
    depends_on: 
      - mssql
  customer-service:
    container_name: customer-service
    image: luuthuong/customer-service:v1
    build:
      context: .
      dockerfile: src/Services/CustomerService/CustomerService.API/Dockerfile
    ports:
      - 5000:80
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    restart: on-failure:3
    depends_on:
      - mssql
      - redis-stack
  order-service:
    container_name: order-services
    image: luuthuong/order-service:v1
    build:
      context: .
      dockerfile: src/OrderService/OrderService.API/Dockerfile
    ports:
      - 5001:80
    depends_on: 
      - mssql
      - redis-stack
  payment-service:
    container_name: payment-service
    image: luuthuong/payment-service:v1
    build:
      context: .
      dockerfile: src/PaymentService/PaymentService.API/Dockerfile
    ports:
      - 5002:80
    depends_on: 
      - mssql
      - redis-stack
  product-sync-service:
    container_name: product-sync-service
    image: luuthuong/product-sync-service:v1
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: src/Services/ProductSyncService/ProductSyncService.API/Dockerfile
    restart: on-failure:3
    links:
      - mssql
      - redis-stack
    ports:
      - 5003:80
    depends_on: 
      - mssql
      - redis-stack
volumes: 
  cache:
    driver: local
  db:
    driver: local